import "reflect-metadata";
import { ApolloServer } from "@apollo/server";
import { buildSchema } from "type-graphql";
import { startStandaloneServer } from "@apollo/server/standalone";
import dataSource from "./database/dataSource";
import UrlResolver from "./resolvers/UrlResolver";
import HistoryResolver from "./resolvers/HistoryResolver";
import UserResolver from "./resolvers/UserResolver";

const start = async () => {
    // Initialisation de la connexion Ã  la base de donnÃ©es
    await dataSource.initialize();

    // CrÃ©ation du schÃ©ma GraphQL Ã  partir des rÃ©solveurs TypeGraphQL
    const schema = await buildSchema({
        resolvers: [UrlResolver, HistoryResolver, UserResolver],
    });

    // CrÃ©ation du serveur Apollo avec le schÃ©ma gÃ©nÃ©rÃ©
    const server = new ApolloServer({ schema });

    // DÃ©marrage du serveur
    const { url } = await startStandaloneServer(server, {
        listen: { port: 4000 },
    });
    console.log(`ğŸš€ Server ready at ${url}`);
};

start().catch((error) => {
    console.error("Erreur lors du dÃ©marrage du serveur:", error);
});
